name: Generate Zip
on:
    pull_request:
    workflow_dispatch:
        inputs:
            ref:
                description: 'Git Commit Ref (branch, tag, or hash)'
                default: 'master'
                required: true
                type: string
            production:
                description: 'Is this a production build?'
                default: 'no'
                type: choice
                options:
                    - 'yes'
                    - 'no'
            slack_channel:
                description: 'Slack channel ID to post to'
                required: false
            slack_thread:
                description: 'Slack thread to post to'
                required: false

jobs:
    set_vars:
        runs-on: ubuntu-latest
        outputs:
            ref: ${{ steps.set_var.outputs.ref }}
            production: ${{ steps.set_var.outputs.production }}
            slack_channel: ${{ steps.set_var.outputs.slack_channel }}
            slack_thread: ${{ steps.set_var.outputs.slack_thread }}
        steps:
            - name: Prepare job variables
              if: github.event_name == 'pull_request'
              run: |
                  echo "JOB_REF=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
                  echo "JOB_PRODUCTION=no" >> $GITHUB_ENV  # Default production to 'no'
                  echo "JOB_SLACK_CHANNEL=''" >> $GITHUB_ENV  # Default slack_channel
                  echo "JOB_SLACK_THREAD=''" >> $GITHUB_ENV  # Default slack_thread

            - name: If a workflow_dispatch, set ref based on input
              if: github.event_name == 'workflow_dispatch'
              run: |
                  echo "JOB_REF=${{ github.event.inputs.ref }}" >> $GITHUB_ENV
                  echo "JOB_PRODUCTION=${{ github.event.inputs.production }}" >> $GITHUB_ENV
                  echo "JOB_SLACK_CHANNEL=${{ github.event.inputs.slack_channel }}" >> $GITHUB_ENV
                  echo "JOB_SLACK_THREAD=${{ github.event.inputs.slack_thread }}" >> $GITHUB_ENV

            - name: Set ref github workflow output
              id: set_var
              run: |
                  echo "ref=${{ env.JOB_REF }}" >> $GITHUB_OUTPUT
                  echo "production=${{ env.JOB_PRODUCTION }}" >> $GITHUB_OUTPUT
                  echo "slack_channel=${{ env.JOB_SLACK_CHANNEL }}" >> $GITHUB_OUTPUT
                  echo "slack_thread=${{ env.JOB_SLACK_THREAD }}" >> $GITHUB_OUTPUT

    zip:
        uses: stellarwp/github-actions/.github/workflows/zip.yml@main
        needs:
            - set_vars
        with:
            ref: ${{ needs.set_vars.outputs.ref }}
            production: ${{ needs.set_vars.outputs.production }}
            slack_channel: ${{ needs.set_vars.outputs.slack_channel }}
            slack_thread: ${{ needs.set_vars.outputs.slack_thread }}
        secrets:
            COMPOSER_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
            GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
            JENKINS_SECRET: ${{ secrets.ZIP_JENKINS_SECRET }}
            S3_BUCKET: ${{ secrets.ZIP_S3_BUCKET }}
            S3_ACCESS_KEY_ID: ${{ secrets.ZIP_S3_ACCESS_KEY_ID }}
            S3_SECRET_ACCESS_KEY: ${{ secrets.ZIP_S3_SECRET_ACCESS_KEY }}
            S3_REGION: ${{ secrets.ZIP_S3_REGION }}
            S3_ENDPOINT: ${{ secrets.ZIP_S3_ENDPOINT }}

    update_pr:
        needs:
          - zip
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        outputs:
          ref: ${{ steps.set_var.outputs.ref }}
          production: ${{ steps.set_var.outputs.production }}
        steps:
            - name: Checkout Branch
              uses: actions/checkout@v4

            - name: Setup PHP
              uses: shivammathur/setup-php@v2
              with:
                php-version: '7.4'

            - name: Install pup
              run: composer -- pup
            - name: Get version and zip name
              id: get_zip_name
              run: |
                # Get version based on production flag
                if [ "${{ env.JOB_PRODUCTION }}" = "yes" ]; then
                  VERSION=$(composer -- pup get-version)
                else
                  VERSION=$(composer -- pup get-version --dev)
                fi

                # Get zip name using the version
                # ZIP_NAME=https://evnt.is/test.zip?file=kadence-blocks.3.4.9.zip
                ZIP_NAME=https://evnt.is/test.zip?file=$(composer -- pup zip-name $VERSION)

                # Set outputs
                echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
                echo "version=$VERSION" >> $GITHUB_OUTPUT

            - name: Create WordPress Playground URL
              id: create_playground_url
              run: |
                # Base64 encode the blueprint JSON

                BLUEPRINT=$(echo '{
                  "preferredVersions": {
                    "php": "8.0",
                    "wp": "latest"
                  },
                  "steps": [
                    {
                      "step": "installPlugin",
                      "pluginData": {
                        "resource": "url",
                        "url": "${{ steps.get_zip_name.outputs.zip_name }}"
                      },
                      "options": {
                        "activate": true
                      }
                    },
                    {
                      "step": "installTheme",
                      "themeData": {
                          "resource": "wordpress.org/themes",
                          "slug": "kadence"
                      },
                      "options": {
                          "activate": true
                      }
                    }
                  ]
                }' | base64 -w 0)

                # Create the playground URL
                PLAYGROUND_URL="https://playground.wordpress.net/#${BLUEPRINT}"

                # Set output
                echo "url=$PLAYGROUND_URL" >> $GITHUB_OUTPUT

            - name: Add PR comment
              uses: actions/github-script@v7
              with:
                github-token: ${{ secrets.GH_BOT_TOKEN }}
                script: |
                  const zipName = '${{ steps.get_zip_name.outputs.zip_name }}';
                  const playgroundUrl = '${{ steps.create_playground_url.outputs.url }}';
                  await github.rest.issues.createComment({
                    ...context.repo,
                    issue_number: context.issue.number,
                    body: `ðŸŽ‰ Build artifacts

                    - Download zip: \`${zipName}.zip\`
                    - [Try it in WordPress Playground](${playgroundUrl})`
                  });
